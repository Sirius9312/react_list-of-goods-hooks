{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","SORT_NONE","sortButtons","setSortButtons","reverse","setReverse","visibleGoods","goods","copyGoods","sort","good1","good2","SORT_ALPHABET","localeCompare","SORT_BY_LENGTH","length","prepareGoods","reset","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,4DAbQC,EAA2B,CACtC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,aAAAA,E,yBAAAA,E,yBAAAA,M,KAsCE,IAAME,EAAgB,WAC3B,MAAsCC,mBAASH,EAASI,WAAxD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KAEMC,EA/BR,SACEC,EADF,GAGY,IADRL,EACO,EADPA,YAAaE,EACN,EADMA,QAEXI,EAAS,YAAOD,GAoBpB,OAlBIL,IACFM,EAAYA,EAAUC,MAAK,SAACC,EAAOC,GACjC,OAAQT,GACN,KAAKL,EAASe,cACZ,OAAOF,EAAM,GAAGG,cAAcF,EAAM,IAEtC,KAAKd,EAASiB,eACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QAAS,OAAO,OAKlBX,IACFI,EAAYA,EAAUJ,WAGjBI,EAOcQ,CAAalB,EAAiB,CAAEI,cAAaE,YAE5Da,EAAQ,WACZd,EAAeN,EAASI,WACxBI,GAAW,IAGb,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWhB,IAAgBL,EAASe,cAAgB,iBAChD,0BACJQ,QAAS,kBAAMjB,EAAeN,EAASe,gBAJzC,iCASA,wBACEO,KAAK,SACLD,UAAWhB,IAAgBL,EAASiB,eAChC,oBACA,6BACJM,QAAS,kBAAMjB,EAAeN,EAASiB,iBALzC,4BAUA,wBACEK,KAAK,SACLD,UAAWd,EAAU,oBACjB,6BACJgB,QAAS,kBAAMf,GAAaD,IAJ9B,sBAUEF,GASEE,IARA,wBACEe,KAAK,SACLD,UAAU,4BACVE,QAASH,EAHX,sBAqBN,6BACE,6BAEIX,EAAae,KAAI,SAACC,GAAD,OACf,oBAAe,UAAQ,OAAvB,SACGA,GADMA,cC3HvBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.96f48824.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport { useState } from 'react';\nimport './App.scss';\n\ntype Goods = string;\n\nexport const goodsFromServer: Goods[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  SORT_NONE = '',\n  SORT_ALPHABET = 'alphabet',\n  SORT_BY_LENGTH = 'length',\n}\n\ntype SortReverseFunctions = {\n  sortButtons: string,\n  reverse: boolean,\n};\n\nfunction prepareGoods(\n  goods: Goods[],\n  { sortButtons, reverse }: SortReverseFunctions,\n): Goods[] {\n  let copyGoods = [...goods];\n\n  if (sortButtons) {\n    copyGoods = copyGoods.sort((good1, good2) => {\n      switch (sortButtons) {\n        case SortType.SORT_ALPHABET:\n          return good1[0].localeCompare(good2[0]); break;\n\n        case SortType.SORT_BY_LENGTH:\n          return good1.length - good2.length; break;\n\n        default: return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    copyGoods = copyGoods.reverse();\n  }\n\n  return copyGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortButtons, setSortButtons] = useState(SortType.SORT_NONE);\n  const [reverse, setReverse] = useState(false);\n\n  const visibleGoods = prepareGoods(goodsFromServer, { sortButtons, reverse });\n\n  const reset = () => {\n    setSortButtons(SortType.SORT_NONE);\n    setReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={sortButtons === SortType.SORT_ALPHABET ? 'button is-info'\n            : 'button is-info is-light'}\n          onClick={() => setSortButtons(SortType.SORT_ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortButtons === SortType.SORT_BY_LENGTH\n            ? 'button is-success'\n            : 'button is-success is-light'}\n          onClick={() => setSortButtons(SortType.SORT_BY_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={reverse ? 'button is-warning'\n            : 'button is-warning is-light'}\n          onClick={() => setReverse(!(reverse))}\n        >\n          Reverse\n        </button>\n\n        {\n          sortButtons ? (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={reset}\n            >\n              Reset\n            </button>\n          ) : (\n            reverse && (\n              <button\n                type=\"button\"\n                className=\"button is-danger is-light\"\n                onClick={reset}\n              >\n                Reset\n              </button>\n            )\n          )\n        }\n      </div>\n\n      <ul>\n        <ul>\n          {\n            visibleGoods.map((good) => (\n              <li key={good} data-cy=\"Good\">\n                {good}\n              </li>\n            ))\n          }\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}